"use strict";
/**
 * Task Backend
 *
 * This file contains the frontend app to interact with your backend solution.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 */

const userInfo = document.querySelector('.user-info');
const userInfoText = document.querySelector('.user-info-text');
const anonymousInfo = document.querySelector('.anonymous-info');
const toggleLoginButton = document.querySelector('.toggle-login');
const toggleRegisterButton = document.querySelector('.toggle-register');
const cancelLoginFormButton = document.querySelector('.login-form-cancel');
const cancelRegisterFormButton = document.querySelector('.register-form-cancel');
const drawButton = document.querySelector('.submit-button');
const resetButton = document.querySelector('.reset-button');
const container = document.querySelector('.container');
const loginForm = document.querySelector('.login-form');
const registerForm = document.querySelector('.register-form');
const logoutButton = document.querySelector('.logout');

const WIDTH = 10;
const HEIGHT = 10;

const state = {
    canvasId: 1,
    user: {username: 'anonymous', credits: 0, loggedIn: false, sessionId: undefined},
    pixelCost: 1,
    pendingChanges: [],
    pixels: Array.from(Array(HEIGHT), () => new Array(WIDTH).fill('#ffffff')),
    lastRefresh: new Date(),
}

function main() {
    prepareCanvas();
    prepareUser();
    initializeCanvas();
    initializeUser();

    setInterval(() => {
        pollServer();
    }, 2000);
}

function prepareCanvas() {
    drawButton.addEventListener('click', () => {
        submitChanges();
    });
    resetButton.addEventListener('click', () => {
        resetCanvas();
    });

    for (let col = 0; col < HEIGHT; col++) {
        for (let row = 0; row < WIDTH; row++) {
            const div = document.createElement('div');
            div.setAttribute('data-x', `${row}`);
            div.setAttribute('data-y', `${col}`);
            div.classList.add('pixel');
            div.style.background = '#ccc';
            const input = document.createElement('input');
            input.setAttribute('type', 'color');
            input.setAttribute('disabled', "true");
            input.addEventListener('change', event => {
                div.classList.add('dirty');
                state.pendingChanges.push({
                    x: row,
                    y: col,
                    color: event.target.value.substring(1)
                });
                resetButton.classList.remove('hidden');
                drawButton.classList.remove('hidden');
            });
            div.appendChild(input);
            container.appendChild(div);
        }
    }
}

function showErrorResponse(response, callback = console.log) {
    let msg = response.error;
    if (response.violations) {
        msg += '\n';
        Object.keys(response.violations).forEach(key => {
            msg += `
${key}: ${response.violations[key].message}`;
        });
    }
    callback(msg);
}

function prepareUser() {
    toggleLoginButton.addEventListener('click', () => {
        loginForm.classList.remove('display-none');
        anonymousInfo.classList.add('display-none');
    });
    toggleRegisterButton.addEventListener('click', () => {
        registerForm.classList.remove('display-none');
        anonymousInfo.classList.add('display-none');
    });
    cancelLoginFormButton.addEventListener('click', () => {
        loginForm.classList.add('display-none');
        anonymousInfo.classList.remove('display-none');
    });
    cancelRegisterFormButton.addEventListener('click', () => {
        registerForm.classList.add('display-none');
        anonymousInfo.classList.remove('display-none');
    });
    loginForm.addEventListener('submit', event => {
        event.preventDefault();
        const username = document.querySelector('.login-username').value;
        const password = document.querySelector('.login-password').value;
        fetch('/api/user/signin', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({username, password}),
        })
            .then(async response => {
                if (response.ok) {
                    return response.json();
                }
                throw await response.json();
            })
            .then(response => login(username, response.sessionId))
            .catch(response => showErrorResponse(response, alert));
    });
    registerForm.addEventListener('submit', event => {
        event.preventDefault();
        const username = document.querySelector('.register-username').value;
        const password = document.querySelector('.register-password').value;
        const email = document.querySelector('.register-email').value;
        fetch('/api/user', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({username, password, email}),
        })
            .then(async response => {
                if (response.ok) {
                    return response.json();
                }
                throw await response.json();
            })
            .then(response => {
                alert(response.message);
                registerForm.classList.add('display-none');
                anonymousInfo.classList.remove('display-none');
            })
            .catch(response => showErrorResponse(response, alert));
    });
    logoutButton.addEventListener('click', () => {
        logout();
    });
}

function initializeCanvas() {
    fetch(`/api/canvas/${state.canvasId}`)
        .then(async response => {
            if (response.ok) {
                return response.json();
            }
            throw await response.json();
        })
        .then(response => {
            state.pixelCost = response.pixelCost;
            const staticPixels = response.image;
            for (let i = 0; i < staticPixels.length / 6; i++) {
                const x = i % WIDTH;
                const y = Math.floor(i / WIDTH);
                const color = `#${staticPixels.substring(i * 6, i * 6 + 6)}`;
                state.pixels[y][x] = color;
                const input = document.querySelector(`[data-x="${x}"][data-y="${y}"] input`);
                input.value = color;
            }
        })
}

function initializeUser() {
    const sessionId = localStorage.getItem('pixelCanvas-sessionId');
    if (sessionId) {
        login(undefined, sessionId);
    } else {
        updateUser()
    }
}

function pollServer() {
    pollUser();
    pollCanvas();
}

function login(username, sessionId) {
    state.user.username = username;
    state.user.sessionId = sessionId;
    state.user.loggedIn = true;
    localStorage.setItem('pixelCanvas-sessionId', sessionId);
    updateUser();
    pollUser();

    document.querySelectorAll('input[type="color"]').forEach(input => {
        input.removeAttribute('disabled');
    });
}

function logout() {
    state.user.loggedIn = false;
    state.user.sessionId = undefined;
    state.user.username = "anonymous"
    state.pendingChanges = [];
    localStorage.removeItem('pixelCanvas-sessionId');
    updateUser();

    document.querySelectorAll('input[type="color"]').forEach(input => {
        input.setAttribute('disabled', 'true');
    });
}

function pollUser() {
    if (!state.user.loggedIn || !state.user.sessionId) {
        return;
    }
    fetch('/api/user', {
        headers: {'X-SESSION-ID': state.user.sessionId},
    })
        .then(async response => {
            if (response.ok) {
                return response.json();
            }
            throw await response.json();
        })
        .then(response => {
            state.user.username = response.username;
            state.user.credits = response.credits;
            updateUser();
        })
        .catch(error => {
            console.log('Session not found. Logging out.', error);
            logout();
        });
}

function pollCanvas() {
    const since = new Date(state.lastRefresh);
    since.setSeconds(since.getSeconds() - 1);
    state.lastRefresh = new Date();
    fetch(`/api/canvas/${state.canvasId}/changes?since=${since.toISOString()}`)
        .then(async response => {
            if (response.ok) {
                return response.json();
            }
            throw await response.json();
        })
        .then(response => {
            state.pixelCost = response.pixelCost;
            response.changes.forEach(change => {
                const x = change.x;
                const y = change.y;
                const color = `#${change.color}`;
                state.pixels[y][x] = color;
                const input = document.querySelector(`[data-x="${x}"][data-y="${y}"] input`);
                input.value = color;
            });
            updateUser();
        })
        .catch(response => showErrorResponse(response));
}

function updateUser() {
    if (state.user.loggedIn) {
        anonymousInfo.classList.add('display-none');
        loginForm.classList.add('display-none');
        registerForm.classList.add('display-none');
        userInfo.classList.remove('display-none');
        userInfoText.innerText = `User: ${state.user.username} | Credits: ${state.user.credits} | Pixel Cost: ${state.pixelCost}`;
    } else {
        if (!loginForm.classList.contains('display-none') || !registerForm.classList.contains('display-none')) {
            return
        }
        userInfo.classList.add('display-none');
        anonymousInfo.classList.remove('display-none');
    }
}

function submitChanges() {
    fetch(`/api/canvas/${state.canvasId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'X-SESSION-ID': state.user.sessionId,
        },
        body: JSON.stringify({pixels: state.pendingChanges}),
    })
        .then(async response => {
            if (response.ok) {
                return response.json();
            }
            throw await response.json();
        })
        .then(response => {
            state.pendingChanges.forEach(change => {
                document.querySelector(`[data-x="${change.x}"][data-y="${change.y}"]`).classList.remove('dirty');
            });
            state.pendingChanges = [];
            state.user.credits = response.creditsLeft;
            updateUser();
            resetButton.classList.add('hidden');
            drawButton.classList.add('hidden');
        })
        .catch(response => showErrorResponse(response, alert));
}

function resetCanvas() {
    state.pendingChanges.forEach(change => {
        const input = document.querySelector(`[data-x="${change.x}"][data-y="${change.y}"] input`);
        input.value = state.pixels[change.y][change.x];
        input.parentNode.classList.remove('dirty');
    });
    state.pendingChanges = [];
    resetButton.classList.add('hidden');
    drawButton.classList.add('hidden');
}

main();
