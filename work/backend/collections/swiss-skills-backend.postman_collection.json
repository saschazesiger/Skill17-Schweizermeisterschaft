{
	"info": {
		"_postman_id": "3e7fe71e-e906-46e7-9d78-7e3d9bdf6261",
		"name": "swiss-skills-backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4764800"
	},
	"item": [
		{
			"name": "generic",
			"item": [
				{
					"name": "not-found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status', () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test('response', () => {",
									"    pm.expect(pm.response.json()).is.to.eql({error: \"Not found\"}); ",
									"});",
									"pm.test(\"content-type\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/random-inexisting-path",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"random-inexisting-path"
							]
						}
					},
					"response": [
						{
							"name": "not-found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/random-inexisting-path",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"random-inexisting-path"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "21"
								},
								{
									"key": "ETag",
									"value": "W/\"15-bm7tJgu8FHlq5QU+Y6gDxOGPfRc\""
								},
								{
									"key": "Date",
									"value": "Sun, 28 Aug 2022 14:50:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "static",
			"item": [
				{
					"name": "/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('response', () => {",
									"    pm.expect(pm.response.text()).contains(\"<title>Pixel Canvas</title>\"); ",
									"});",
									"pm.test(\"Content-Type\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type').startsWith('text/html')).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/index.html",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('response', () => {",
									"    pm.expect(pm.response.text()).contains(\"<title>Pixel Canvas</title>\"); ",
									"});",
									"pm.test(\"content-type\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type').startsWith('text/html')).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/index.html",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"index.html"
							]
						}
					},
					"response": []
				},
				{
					"name": "/app.js",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('response', () => {",
									"    pm.expect(pm.response.text()).contains(\"use strict\"); ",
									"});",
									"pm.test(\"content-type\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type').startsWith('application/javascript')).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/app.js",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"app.js"
							]
						}
					},
					"response": []
				},
				{
					"name": "/app.css",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('response', () => {",
									"    pm.expect(pm.response.text()).contains(\"body {\"); ",
									"});",
									"pm.test(\"content-type\", () => {",
									"  pm.expect(pm.response.headers.get('Content-Type').startsWith('text/css')).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/app.css",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"app.css"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/api",
			"item": [
				{
					"name": "/user",
					"item": [
						{
							"name": "POST /",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "invalid - missing username",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Request body is not valid.\", 'error not as expected');",
															"    pm.expect(responseJson.invalid).to.equal(true, 'invalid not as expected');",
															"    pm.expect(Object.keys(responseJson.violations).length).to.equal(1, 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['username']['message']).to.equal('Attribute is required', 'violations does not contain correct messages');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"validemail@test.local\",\n    \"password\": \"validpassword\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user"
													]
												}
											},
											"response": [
												{
													"name": "invalid - missing username",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"email\": \"validemail@test.local\",\n    \"password\": \"validpassword\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/user",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Host",
															"value": "localhost:4000"
														},
														{
															"key": "Date",
															"value": "Fri, 02 Sep 2022 09:23:55 GMT"
														},
														{
															"key": "Connection",
															"value": "close"
														},
														{
															"key": "X-Powered-By",
															"value": "PHP/8.1.1"
														},
														{
															"key": "Expires",
															"value": "Thu, 19 Nov 1981 08:52:00 GMT"
														},
														{
															"key": "Cache-Control",
															"value": "no-store, no-cache, must-revalidate"
														},
														{
															"key": "Pragma",
															"value": "no-cache"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n    \"violations\": {\n        \"username\": {\n            \"message\": \"Attribute is required\"\n        }\n    },\n    \"error\": \"Request body is not valid.\",\n    \"invalid\": true\n}"
												}
											]
										},
										{
											"name": "invalid - missing email",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Request body is not valid.\", 'error not as expected');",
															"    pm.expect(responseJson.invalid).to.equal(true, 'invalid not as expected');",
															"    pm.expect(Object.keys(responseJson.violations).length).to.equal(1, 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['email']['message']).to.equal('Attribute is required', 'violations does not contain correct messages');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"validusername\",\n    \"password\": \"validpassword\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user"
													]
												}
											},
											"response": [
												{
													"name": "invalid - missing email",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"validusername\",\n    \"password\": \"validpassword\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/user",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "112"
														},
														{
															"key": "ETag",
															"value": "W/\"70-2xz6GAAkF+MW2D+r9uFKJq6mQXc\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:17:47 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Request body is not valid.\",\n    \"invalid\": true,\n    \"violations\": {\n        \"email\": {\n            \"message\": \"Attribute is required\"\n        }\n    }\n}"
												}
											]
										},
										{
											"name": "invalid - missing password",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Request body is not valid.\", 'error not as expected');",
															"    pm.expect(responseJson.invalid).to.equal(true, 'invalid not as expected');",
															"    pm.expect(Object.keys(responseJson.violations).length).to.equal(1, 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['password']['message']).to.equal('Attribute is required', 'violations does not contain correct messages');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"validusername\",\n    \"email\": \"validemail@test.local\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user"
													]
												}
											},
											"response": [
												{
													"name": "invalid - missing password",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"validusername\",\n    \"email\": \"validemail@test.local\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/user",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Host",
															"value": "localhost:4000"
														},
														{
															"key": "Date",
															"value": "Fri, 02 Sep 2022 09:24:29 GMT"
														},
														{
															"key": "Connection",
															"value": "close"
														},
														{
															"key": "X-Powered-By",
															"value": "PHP/8.1.1"
														},
														{
															"key": "Expires",
															"value": "Thu, 19 Nov 1981 08:52:00 GMT"
														},
														{
															"key": "Cache-Control",
															"value": "no-store, no-cache, must-revalidate"
														},
														{
															"key": "Pragma",
															"value": "no-cache"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n    \"violations\": {\n        \"password\": {\n            \"message\": \"Attribute is required\"\n        }\n    },\n    \"error\": \"Request body is not valid.\",\n    \"invalid\": true\n}"
												}
											]
										},
										{
											"name": "invalid - username and email missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Request body is not valid.\", 'error not as expected');",
															"    pm.expect(responseJson.invalid).to.equal(true, 'invalid not as expected');",
															"    pm.expect(Object.keys(responseJson.violations).length).to.equal(2, 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['username']['message']).to.equal('Attribute is required', 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['email']['message']).to.equal('Attribute is required', 'violations does not contain correct messages');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"password\": \"validpassword\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user"
													]
												}
											},
											"response": [
												{
													"name": "invalid - username and email missing",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"password\": \"validpassword\"\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/user",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "159"
														},
														{
															"key": "ETag",
															"value": "W/\"9f-4A4toajCKP8ozCrLLbWLf2M2Lxs\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:18:17 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Request body is not valid.\",\n    \"invalid\": true,\n    \"violations\": {\n        \"username\": {\n            \"message\": \"Attribute is required\"\n        },\n        \"email\": {\n            \"message\": \"Attribute is required\"\n        }\n    }\n}"
												}
											]
										},
										{
											"name": "invalid - attribute length",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Request body is not valid.\", 'error not as expected');",
															"    pm.expect(responseJson.invalid).to.equal(true, 'invalid not as expected');",
															"    pm.expect(Object.keys(responseJson.violations).length).to.equal(3, 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['username']['message']).to.equal('Attribute must be at least 4 characters long.', 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['password']['message']).to.equal('Attribute must be at least 8 characters long.', 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['email']['message']).to.equal('Attribute must be at most 200 characters long.', 'violations does not contain correct messages');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"uniqueUsername\", pm.variables.replaceIn(\"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"));",
															"pm.collectionVariables.set(\"uniqueEmail\", pm.variables.replaceIn(\"{{$randomUUID}}{{$randomUUID}}{{$randomUUID}}{{$randomUUID}}{{$randomUUID}}{{$randomUUID}}\"));",
															"pm.collectionVariables.set(\"uniquePassword\", pm.variables.replaceIn(\"{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{uniqueUsername}}\",\n    \"email\": \"{{uniqueEmail}}\",\n    \"password\": \"{{uniquePassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user"
													]
												}
											},
											"response": [
												{
													"name": "invalid - attribute length",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"{{uniqueUsername}}\",\n    \"email\": \"{{uniqueEmail}}\",\n    \"password\": \"{{uniquePassword}}\"\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/user",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "279"
														},
														{
															"key": "ETag",
															"value": "W/\"117-TQalXQs7tfn9pO5VL5gZNhUxars\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:18:22 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Request body is not valid.\",\n    \"invalid\": true,\n    \"violations\": {\n        \"email\": {\n            \"message\": \"Attribute must be at most 200 characters long.\"\n        },\n        \"username\": {\n            \"message\": \"Attribute must be at least 4 characters long.\"\n        },\n        \"password\": {\n            \"message\": \"Attribute must be at least 8 characters long.\"\n        }\n    }\n}"
												}
											]
										}
									]
								},
								{
									"name": "valid user creation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.message).to.equal(\"Welcome to Pixel Canvas! We sent you an email to verify your email address.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"uniqueUsername\", pm.variables.replaceIn(\"user-{{$randomUUID}}\"));",
													"pm.collectionVariables.set(\"uniqueEmail\", pm.variables.replaceIn(\"user{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}@test.local\"));",
													"pm.collectionVariables.set(\"uniquePassword\", pm.variables.replaceIn(\"password{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{uniqueUsername}}\",\n    \"email\": \"{{uniqueEmail}}\",\n    \"password\": \"{{uniquePassword}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/user",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"user"
											]
										}
									},
									"response": [
										{
											"name": "valid user creation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{uniqueUsername}}\",\n    \"email\": \"{{uniqueEmail}}\",\n    \"password\": \"{{uniquePassword}}\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Host",
													"value": "localhost:4000"
												},
												{
													"key": "Date",
													"value": "Fri, 02 Sep 2022 09:24:47 GMT"
												},
												{
													"key": "Connection",
													"value": "close"
												},
												{
													"key": "X-Powered-By",
													"value": "PHP/8.1.1"
												},
												{
													"key": "Expires",
													"value": "Thu, 19 Nov 1981 08:52:00 GMT"
												},
												{
													"key": "Cache-Control",
													"value": "no-store, no-cache, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Welcome to Pixel Canvas! We sent you an email to verify your email address.\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "GET /verify/:token",
							"item": [
								{
									"name": "verify email sent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('response', () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.total).to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"uniqueUsername\", pm.variables.replaceIn(\"user-{{$randomUUID}}\"));",
													"pm.collectionVariables.set(\"uniqueEmail\", pm.variables.replaceIn(\"user{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}@test.local\"));",
													"pm.collectionVariables.set(\"uniquePassword\", pm.variables.replaceIn(\"password{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.variables.replaceIn(\"{{BASE_URL}}/api/user\"),",
													"    method: 'POST',",
													"    header: {'Content-Type': 'application/json'},",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({",
													"            username: pm.collectionVariables.get(\"uniqueUsername\"),",
													"            email: pm.collectionVariables.get(\"uniqueEmail\"),",
													"            password: pm.collectionVariables.get(\"uniquePassword\"),",
													"        })",
													"    }",
													"}, (error, response) => {",
													"    console.log('User Creation Result:', error, response.text());",
													"    pm.test('creation successful', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.expect(response).to.have.property('code', 201);",
													"",
													"        // wait to ensure Mailhog received the expected email",
													"        setTimeout(() => {}, 1000);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{MAILHOG_URL}}/api/v2/search?kind=containing&query=Welcome%20to%20Pixel%20Canvas%20{{uniqueUsername}}",
											"host": [
												"{{MAILHOG_URL}}"
											],
											"path": [
												"api",
												"v2",
												"search"
											],
											"query": [
												{
													"key": "kind",
													"value": "containing"
												},
												{
													"key": "query",
													"value": "Welcome%20to%20Pixel%20Canvas%20{{uniqueUsername}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "verify email sent",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{MAILHOG_URL}}/api/v2/search?kind=containing&query=Welcome%20to%20Pixel%20Canvas%20{{uniqueUsername}}",
													"host": [
														"{{MAILHOG_URL}}"
													],
													"path": [
														"api",
														"v2",
														"search"
													],
													"query": [
														{
															"key": "kind",
															"value": "containing"
														},
														{
															"key": "query",
															"value": "Welcome%20to%20Pixel%20Canvas%20{{uniqueUsername}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Date",
													"value": "Fri, 02 Sep 2022 09:25:38 GMT"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												}
											],
											"cookie": [],
											"body": "{\n    \"total\": 1,\n    \"count\": 1,\n    \"start\": 0,\n    \"items\": [\n        {\n            \"ID\": \"mpcrtBNcEhQuxaHVfAmPJ90iFi7sHJ1-l91E93tKj2Y=@mailhog.example\",\n            \"From\": {\n                \"Relays\": null,\n                \"Mailbox\": \"swissskills\",\n                \"Domain\": \"localhost.test\",\n                \"Params\": \"\"\n            },\n            \"To\": [\n                {\n                    \"Relays\": null,\n                    \"Mailbox\": \"useruaf\",\n                    \"Domain\": \"test.local.test\",\n                    \"Params\": \"\"\n                }\n            ],\n            \"Content\": {\n                \"Headers\": {\n                    \"Content-Type\": [\n                        \"text/html; charset=iso-8859-1\"\n                    ],\n                    \"Date\": [\n                        \"Fri, 2 Sep 2022 09:25:37 +0000\"\n                    ],\n                    \"From\": [\n                        \"swissskills@localhost.test\"\n                    ],\n                    \"MIME-Version\": [\n                        \"1.0\"\n                    ],\n                    \"Message-ID\": [\n                        \"<iddaNAGR1fumm6RWhbycKqq9ieOi5IGpzBwujLoryA@localhost>\"\n                    ],\n                    \"Received\": [\n                        \"from localhost by mailhog.example (MailHog)\\r\\n          id mpcrtBNcEhQuxaHVfAmPJ90iFi7sHJ1-l91E93tKj2Y=@mailhog.example; Fri, 02 Sep 2022 09:25:37 +0000\"\n                    ],\n                    \"Return-Path\": [\n                        \"<swissskills@localhost.test>\"\n                    ],\n                    \"Subject\": [\n                        \"Welcome to Pixel Canvas user-89ca0a3a-2a19-4e53-93f7-dfa13a71316e\"\n                    ],\n                    \"To\": [\n                        \"useruaf@test.local.test\"\n                    ],\n                    \"X-Mailer\": [\n                        \"PHPMailer 6.6.4 (https://github.com/PHPMailer/PHPMailer)\"\n                    ]\n                },\n                \"Body\": \"            <strong>Welcome to Pixel Canvas</strong>\\r\\n            <br/>\\r\\n            <br/>\\r\\n            <p>\\r\\n                Please verify your email address by clicking on the following link:\\r\\n            </p>\\r\\n            <p>\\r\\n                <a href=\\\\\\\"http://localhost:4000/api/user/verify/e0ef02c2-255b-47cd-8dc9-16bf16542053\\\\\\\">http://localhost:4000/api/user/verify/e0ef02c2-255b-47cd-8dc9-16bf16542053</a>\\r\\n            </p>\\r\\n\",\n                \"Size\": 809,\n                \"MIME\": null\n            },\n            \"Created\": \"2022-09-02T09:25:37.420022491Z\",\n            \"MIME\": null,\n            \"Raw\": {\n                \"From\": \"swissskills@localhost.test\",\n                \"To\": [\n                    \"useruaf@test.local.test\"\n                ],\n                \"Data\": \"Date: Fri, 2 Sep 2022 09:25:37 +0000\\r\\nTo: useruaf@test.local.test\\r\\nFrom: swissskills@localhost.test\\r\\nSubject: Welcome to Pixel Canvas user-89ca0a3a-2a19-4e53-93f7-dfa13a71316e\\r\\nMessage-ID: <iddaNAGR1fumm6RWhbycKqq9ieOi5IGpzBwujLoryA@localhost>\\r\\nX-Mailer: PHPMailer 6.6.4 (https://github.com/PHPMailer/PHPMailer)\\r\\nMIME-Version: 1.0\\r\\nContent-Type: text/html; charset=iso-8859-1\\r\\n\\r\\n            <strong>Welcome to Pixel Canvas</strong>\\r\\n            <br/>\\r\\n            <br/>\\r\\n            <p>\\r\\n                Please verify your email address by clicking on the following link:\\r\\n            </p>\\r\\n            <p>\\r\\n                <a href=\\\\\\\"http://localhost:4000/api/user/verify/e0ef02c2-255b-47cd-8dc9-16bf16542053\\\\\\\">http://localhost:4000/api/user/verify/e0ef02c2-255b-47cd-8dc9-16bf16542053</a>\\r\\n            </p>\\r\\n\",\n                \"Helo\": \"localhost\"\n            }\n        }\n    ]\n}"
										}
									]
								},
								{
									"name": "verify email link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(302);",
													"});",
													"pm.test('redirect', () => {",
													"    pm.expect(pm.response.headers.get('Location')).to.equal('/');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"uniqueUsername\", pm.variables.replaceIn(\"user-{{$randomUUID}}\"));",
													"pm.collectionVariables.set(\"uniqueEmail\", pm.variables.replaceIn(\"user{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}@test.local\"));",
													"pm.collectionVariables.set(\"uniquePassword\", pm.variables.replaceIn(\"password{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"));",
													"",
													"pm.collectionVariables.set(\"verifyLink\", pm.variables.replaceIn(\"{{BASE_URL}}/failed-extracting-email-verify-link\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.variables.replaceIn(\"{{BASE_URL}}/api/user\"),",
													"    method: 'POST',",
													"    header: {'Content-Type': 'application/json'},",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({",
													"            username: pm.collectionVariables.get(\"uniqueUsername\"),",
													"            email: pm.collectionVariables.get(\"uniqueEmail\"),",
													"            password: pm.collectionVariables.get(\"uniquePassword\"),",
													"        })",
													"    }",
													"}, (error, response) => {",
													"    console.log('User Creation Result:', error, response.text());",
													"    pm.test('creation successful', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.expect(response).to.have.property('code', 201);",
													"",
													"        // wait to ensure Mailhog received the expected email",
													"        setTimeout(() => {",
													"            pm.sendRequest(pm.variables.replaceIn('{{MAILHOG_URL}}/api/v2/search?kind=containing&query=Welcome%20to%20Pixel%20Canvas%20{{uniqueUsername}}'), (error, response) => {",
													"                const responseJson = response.json();",
													"                console.log('Email Search Result:', error, responseJson);",
													"                pm.test('email received', () => {",
													"                    pm.expect(error).to.equal(null);",
													"                    pm.expect(response).to.have.property('code', 200);",
													"                    pm.expect(responseJson.total).to.equal(1);",
													"",
													"                    if (responseJson && responseJson.items && responseJson.items.length >= 0 && responseJson.items[0].Content && responseJson.items[0].Content.Body){",
													"                        const extractedLink = /\"(http.+)\"/.exec(responseJson.items[0].Content.Body.replace('=\\r\\n', ''))[1];",
													"                        console.log('Extracted link from email:', extractedLink);",
													"                        pm.collectionVariables.set(\"verifyLink\", extractedLink);",
													"                    } else {",
													"                        pm.expect.fail('Failed extracting the link from the message in email: ' + JSON.stringify(responseJson));",
													"                    }",
													"                });",
													"            });",
													"        }, 1000);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{verifyLink}}",
											"host": [
												"{{verifyLink}}"
											]
										}
									},
									"response": [
										{
											"name": "verify email link",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{verifyLink}}",
													"host": [
														"{{verifyLink}}"
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Location",
													"value": "/"
												},
												{
													"key": "Vary",
													"value": "Accept"
												},
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "23"
												},
												{
													"key": "Date",
													"value": "Sun, 28 Aug 2022 21:18:42 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "Found. Redirecting to /"
										}
									]
								},
								{
									"name": "invalid email verify token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(401);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('text/plain')).to.be.true;",
													"    pm.expect(pm.response.text()).to.equal('Invalid token');",
													"    pm.expect(pm.response.headers.get('Location')).not.to.equal('/');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:4000/api/user/verify/invalid-token",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "4000",
											"path": [
												"api",
												"user",
												"verify",
												"invalid-token"
											]
										}
									},
									"response": [
										{
											"name": "invalid email verify token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://localhost:4000/api/user/verify/invalid-token",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "4000",
													"path": [
														"api",
														"user",
														"verify",
														"invalid-token"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "text/plain; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "13"
												},
												{
													"key": "ETag",
													"value": "W/\"d-esFQYRnWYNusohXXSwdo4jjdxvo\""
												},
												{
													"key": "Date",
													"value": "Thu, 01 Sep 2022 20:54:14 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "Invalid token"
										}
									]
								}
							]
						},
						{
							"name": "POST /signin",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "user does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"User does not exist\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"does-not-exist\",\n    \"password\": \"wrong-password\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user/signin",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user",
														"signin"
													]
												}
											},
											"response": [
												{
													"name": "user does not exist",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"does-not-exist\",\n    \"password\": \"wrong-password\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/user/signin",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user",
																"signin"
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "31"
														},
														{
															"key": "ETag",
															"value": "W/\"1f-Eu7acQ2UOG+Ax3bOeoQ6j2I+PFE\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:18:57 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"User does not exist\"\n}"
												}
											]
										},
										{
											"name": "invalid - username missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Request body is not valid.\", 'error not as expected');",
															"    pm.expect(responseJson.invalid).to.equal(true, 'invalid not as expected');",
															"    pm.expect(Object.keys(responseJson.violations).length).to.equal(1, 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['username']['message']).to.equal('Attribute is required', 'violations does not contain correct messages');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"password\": \"wrong-password\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user/signin",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user",
														"signin"
													]
												}
											},
											"response": [
												{
													"name": "invalid - username missing",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"password\": \"wrong-password\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/user/signin",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user",
																"signin"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "115"
														},
														{
															"key": "ETag",
															"value": "W/\"73-mY2cjO+itxgvHErRFsYLZ581rNE\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:19:03 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Request body is not valid.\",\n    \"invalid\": true,\n    \"violations\": {\n        \"username\": {\n            \"message\": \"Attribute is required\"\n        }\n    }\n}"
												}
											]
										},
										{
											"name": "invalid - password missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Request body is not valid.\", 'error not as expected');",
															"    pm.expect(responseJson.invalid).to.equal(true, 'invalid not as expected');",
															"    pm.expect(Object.keys(responseJson.violations).length).to.equal(1, 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['password']['message']).to.equal('Attribute is required', 'violations does not contain correct messages');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"inexisting-username\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user/signin",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user",
														"signin"
													]
												}
											},
											"response": [
												{
													"name": "invalid - password missing",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"username\": \"inexisting-username\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/user/signin",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user",
																"signin"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "115"
														},
														{
															"key": "ETag",
															"value": "W/\"73-wonM3f2chvgniXb5FCGt2zCodiI\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:19:08 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Request body is not valid.\",\n    \"invalid\": true,\n    \"violations\": {\n        \"password\": {\n            \"message\": \"Attribute is required\"\n        }\n    }\n}"
												}
											]
										}
									]
								},
								{
									"name": "wrong password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(401);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.equal(\"User does not exist\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{uniqueUsername}}\",\n    \"password\": \"wrong-password\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/user/signin",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"user",
												"signin"
											]
										}
									},
									"response": [
										{
											"name": "user does not exist",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"does-not-exist\",\n    \"password\": \"wrong-password\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user/signin",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user",
														"signin"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "31"
												},
												{
													"key": "ETag",
													"value": "W/\"1f-Eu7acQ2UOG+Ax3bOeoQ6j2I+PFE\""
												},
												{
													"key": "Date",
													"value": "Sun, 28 Aug 2022 21:18:57 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"error\": \"User does not exist\"\n}"
										}
									]
								},
								{
									"name": "cant sign in without email verified",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(401);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.be.equal('User email not verified. Please click on the link in the email we sent you.');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"uniqueUsername_unverified\", pm.variables.replaceIn(\"user-{{$randomUUID}}\"));",
													"pm.collectionVariables.set(\"uniqueEmail_unverified\", pm.variables.replaceIn(\"user{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}@test.local\"));",
													"pm.collectionVariables.set(\"uniquePassword_unverified\", pm.variables.replaceIn(\"password{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}{{$randomAlphaNumeric}}\"));",
													"",
													"pm.sendRequest({",
													"    url: pm.variables.replaceIn(\"{{BASE_URL}}/api/user\"),",
													"    method: 'POST',",
													"    header: {'Content-Type': 'application/json'},",
													"    body: {",
													"        mode: 'raw',        ",
													"        raw: JSON.stringify({",
													"            username: pm.collectionVariables.get(\"uniqueUsername_unverified\"),",
													"            email: pm.collectionVariables.get(\"uniqueEmail_unverified\"),",
													"            password: pm.collectionVariables.get(\"uniquePassword_unverified\"),",
													"        })",
													"    }",
													"}, (error, response) => {",
													"    console.log('User Creation Result:', error, response.text());",
													"    pm.test('creation successful', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.expect(response).to.have.property('code', 201);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{uniqueUsername_unverified}}\",\n    \"password\": \"{{uniquePassword_unverified}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/user/signin",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"user",
												"signin"
											]
										}
									},
									"response": [
										{
											"name": "cant sign in without email verified",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{uniqueUsername_unverified}}\",\n    \"password\": \"{{uniquePassword_unverified}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user/signin",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user",
														"signin"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Host",
													"value": "localhost:4000"
												},
												{
													"key": "Date",
													"value": "Fri, 02 Sep 2022 09:49:53 GMT"
												},
												{
													"key": "Connection",
													"value": "close"
												},
												{
													"key": "X-Powered-By",
													"value": "PHP/8.1.1"
												},
												{
													"key": "Expires",
													"value": "Thu, 19 Nov 1981 08:52:00 GMT"
												},
												{
													"key": "Cache-Control",
													"value": "no-store, no-cache, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n    \"error\": \"User email not verified. Please click on the link in the email we sent you.\"\n}"
										}
									]
								},
								{
									"name": "valid sign in",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.sessionId).to.have.length.greaterThan(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{uniqueUsername}}\",\n    \"password\": \"{{uniquePassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/user/signin",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"user",
												"signin"
											]
										}
									},
									"response": [
										{
											"name": "valid sign in",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{uniqueUsername}}\",\n    \"password\": \"{{uniquePassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/user/signin",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user",
														"signin"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "52"
												},
												{
													"key": "ETag",
													"value": "W/\"34-UvG4wx24pPvvPSzb8baXFsUt0ko\""
												},
												{
													"key": "Date",
													"value": "Sun, 28 Aug 2022 21:17:03 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"sessionId\": \"928d7453-ed3f-4214-a517-9d68274170f0\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "GET /",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "header missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Session header not found. Please specify the header x-session-id.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/api/user",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user"
													]
												}
											},
											"response": [
												{
													"name": "header missing",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{BASE_URL}}/api/user",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user"
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "77"
														},
														{
															"key": "ETag",
															"value": "W/\"4d-txjbf5H0a3NbHWszHUwXPMYvioU\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:19:23 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Session header not found. Please specify the header x-session-id.\"\n}"
												}
											]
										},
										{
											"name": "header with invalid value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Session 123456789 invalid.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "123456789",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/api/user",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user"
													]
												}
											},
											"response": [
												{
													"name": "header with invalid value",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "X-SESSION-ID",
																"value": "123456789",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{BASE_URL}}/api/user",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"user"
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "38"
														},
														{
															"key": "ETag",
															"value": "W/\"26-wtQU4Uswpw1ahTZ9R+CRpF7lN6I\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:19:27 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Session 123456789 invalid.\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "valid get user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.username).to.equal(\"testaccount\");",
													"    pm.expect(responseJson.credits).to.be.a('number');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-SESSION-ID",
												"value": "secret-sauce",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/user",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"user"
											]
										}
									},
									"response": [
										{
											"name": "valid get user",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/api/user",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"user"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "70"
												},
												{
													"key": "ETag",
													"value": "W/\"46-hCQ4aIa7q2uD/HmR9OdDF8fTyrE\""
												},
												{
													"key": "Date",
													"value": "Thu, 01 Sep 2022 19:15:55 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"username\": \"user-3c3314d8-86b1-44ef-ad69-e54855e9c820\",\n    \"credits\": 101\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "/canvas",
					"item": [
						{
							"name": "GET /:id",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "non existing canvas",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(404);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Canvas not found\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/not-existing",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"not-existing"
													]
												}
											},
											"response": [
												{
													"name": "non existing canvas",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/not-existing",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"not-existing"
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "28"
														},
														{
															"key": "ETag",
															"value": "W/\"1c-BbUvNVfWV1actl58xKOTLqELBwY\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:20:34 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Canvas not found\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "valid get canvas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.image).to.equal(\"ffffffffffffffffffffffffffffffffffff000000ffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff000000000000ffffffffffffffffff000000000000ffffffffffff000000000000000000000000ffffffffffff000000000000ffffff000000000000000000000000000000000000ffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffff000000ffffffffffff000000ffffffffffffffffffffffffffffff000000000000ffffff000000000000ffffffffffff\", 'image not in original state');",
													"    pm.expect(responseJson.pixelCost).to.equal(5, 'pixelCost not as expected');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/canvas/1",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"canvas",
												"1"
											]
										}
									},
									"response": [
										{
											"name": "valid get canvas",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/1",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "626"
												},
												{
													"key": "ETag",
													"value": "W/\"272-W4P2mFmcQ91853cUwZ6CxFsTBiY\""
												},
												{
													"key": "Date",
													"value": "Sun, 28 Aug 2022 21:20:39 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"image\": \"ffffffffffffffffffffffffffffffffffff000000ffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff000000000000ffffffffffffffffff000000000000ffffffffffff000000000000000000000000ffffffffffff000000000000ffffff000000000000000000000000000000000000ffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffff000000ffffffffffff000000ffffffffffffffffffffffffffffff000000000000ffffff000000000000ffffffffffff\",\n    \"pixelCost\": 5\n}"
										}
									]
								}
							]
						},
						{
							"name": "GET /:id/changes",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "non existing canvas",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(404);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Canvas not found\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/not-existing/changes?since=2022-09-08T10:00:00Z",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"not-existing",
														"changes"
													],
													"query": [
														{
															"key": "since",
															"value": "2022-09-08T10:00:00Z"
														}
													]
												}
											},
											"response": [
												{
													"name": "non existing canvas",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/not-existing/changes?since=2022-09-08T10:00:00Z",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"not-existing",
																"changes"
															],
															"query": [
																{
																	"key": "since",
																	"value": "2022-09-08T10:00:00Z"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "28"
														},
														{
															"key": "ETag",
															"value": "W/\"1c-BbUvNVfWV1actl58xKOTLqELBwY\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:20:45 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Canvas not found\"\n}"
												}
											]
										},
										{
											"name": "missing \"since\" query parameter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Missing \\\"since\\\" parameter\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/not-existing/changes",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"not-existing",
														"changes"
													]
												}
											},
											"response": [
												{
													"name": "missing \"since\" query parameter",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/not-existing/changes",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"not-existing",
																"changes"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "39"
														},
														{
															"key": "ETag",
															"value": "W/\"27-fVMZj5GDmZzy0dQvsjH+dsegRE4\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:20:49 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Missing \\\"since\\\" parameter\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "valid get changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.changes).to.eql([]);",
													"    pm.expect(responseJson.pixelCost).to.equal(5);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/canvas/1/changes?since=2022-09-08T10:00:00Z",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"canvas",
												"1",
												"changes"
											],
											"query": [
												{
													"key": "since",
													"value": "2022-09-08T10:00:00Z"
												}
											]
										}
									},
									"response": [
										{
											"name": "valid get changes",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/1/changes?since=2022-09-08T10:00:00Z",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"1",
														"changes"
													],
													"query": [
														{
															"key": "since",
															"value": "2022-09-08T10:00:00Z"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "28"
												},
												{
													"key": "ETag",
													"value": "W/\"1c-umoXf+33nCxlSGV2raZC6QMjKwA\""
												},
												{
													"key": "Date",
													"value": "Sun, 28 Aug 2022 21:20:53 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"changes\": [],\n    \"pixelCost\": 5\n}"
										}
									]
								}
							]
						},
						{
							"name": "PUT /:id",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "missing pixels",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Request body is not valid.\", 'error not as expected');",
															"    pm.expect(responseJson.invalid).to.equal(true, 'invalid not as expected');",
															"    pm.expect(Object.keys(responseJson.violations).length).to.equal(1, 'violations does not contain correct messages');",
															"    pm.expect(responseJson.violations['pixels']['message']).to.equal('Attribute is required', 'violations does not contain correct messages');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/not-existing",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"not-existing"
													]
												}
											},
											"response": [
												{
													"name": "missing pixels",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "X-SESSION-ID",
																"value": "secret-sauce",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/not-existing",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"not-existing"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "113"
														},
														{
															"key": "ETag",
															"value": "W/\"71-WAzf/CB4TpWcmCNh2pL3mBcg9WE\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:21:01 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Request body is not valid.\",\n    \"invalid\": true,\n    \"violations\": {\n        \"pixels\": {\n            \"message\": \"Attribute is required\"\n        }\n    }\n}"
												}
											]
										},
										{
											"name": "non existing canvas",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(404);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Canvas not found\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/not-existing",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"not-existing"
													]
												}
											},
											"response": [
												{
													"name": "non existing canvas",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "X-SESSION-ID",
																"value": "secret-sauce",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pixels\": []\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/not-existing",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"not-existing"
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "28"
														},
														{
															"key": "ETag",
															"value": "W/\"1c-BbUvNVfWV1actl58xKOTLqELBwY\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:21:05 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Canvas not found\"\n}"
												}
											]
										},
										{
											"name": "empty pixels",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"No pixels to draw specified\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/1",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"1"
													]
												}
											},
											"response": [
												{
													"name": "empty pixels",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "X-SESSION-ID",
																"value": "secret-sauce",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pixels\": []\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/1",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"1"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "39"
														},
														{
															"key": "ETag",
															"value": "W/\"27-IBE0YvZS52YG/7FTJYskF6Wt44k\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:21:09 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"No pixels to draw specified\"\n}"
												}
											]
										},
										{
											"name": "invalid pixel 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Invalid pixel\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}, \n        {}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/1",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"1"
													]
												}
											},
											"response": [
												{
													"name": "invalid pixel 1",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "X-SESSION-ID",
																"value": "secret-sauce",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}, \n        {}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/1",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"1"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "25"
														},
														{
															"key": "ETag",
															"value": "W/\"19-mwTvt9v8rctKTWijN57QaGa3LN0\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:21:13 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Invalid pixel\"\n}"
												}
											]
										},
										{
											"name": "invalid pixel 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Invalid pixel\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}, \n        {\"x\": 1, \"y\": 0, \"color\": \"123\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/1",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"1"
													]
												}
											},
											"response": [
												{
													"name": "invalid pixel 2",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "X-SESSION-ID",
																"value": "secret-sauce",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}, \n        {\"x\": 1, \"y\": 0, \"color\": \"123\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/1",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"1"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "25"
														},
														{
															"key": "ETag",
															"value": "W/\"19-mwTvt9v8rctKTWijN57QaGa3LN0\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:21:17 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Invalid pixel\"\n}"
												}
											]
										},
										{
											"name": "invalid pixel 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Invalid pixel\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": [\n        {\"x\": -1, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/3",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"3"
													]
												}
											},
											"response": [
												{
													"name": "invalid pixel 3",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "X-SESSION-ID",
																"value": "secret-sauce",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pixels\": [\n        {\"x\": -1, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/3",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"3"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "25"
														},
														{
															"key": "ETag",
															"value": "W/\"19-mwTvt9v8rctKTWijN57QaGa3LN0\""
														},
														{
															"key": "Date",
															"value": "Thu, 01 Sep 2022 20:30:30 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Invalid pixel\"\n}"
												}
											]
										},
										{
											"name": "invalid pixel 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Invalid pixel\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": [\n        {\"x\": 11, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/3",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"3"
													]
												}
											},
											"response": [
												{
													"name": "invalid pixel 3",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "X-SESSION-ID",
																"value": "secret-sauce",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pixels\": [\n        {\"x\": -1, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/3",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"3"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "25"
														},
														{
															"key": "ETag",
															"value": "W/\"19-mwTvt9v8rctKTWijN57QaGa3LN0\""
														},
														{
															"key": "Date",
															"value": "Thu, 01 Sep 2022 20:30:30 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Invalid pixel\"\n}"
												}
											]
										},
										{
											"name": "duplicate pixels",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(400);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Duplicate pixels\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}, \n        {\"x\": 0, \"y\": 0, \"color\": \"ff00ff\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/3",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"3"
													]
												}
											},
											"response": [
												{
													"name": "invalid pixel 3",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "X-SESSION-ID",
																"value": "secret-sauce",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}, \n        {\"x\": 0, \"y\": 0, \"color\": \"ff00ff\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/3",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"3"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "28"
														},
														{
															"key": "ETag",
															"value": "W/\"1c-Byq7OHQhTN1VVY6/cys5OrpG5Mo\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:21:22 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Duplicate pixels\"\n}"
												}
											]
										},
										{
											"name": "missing header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('status', () => {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test('response', () => {",
															"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
															"",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.error).to.equal(\"Session header not found. Please specify the header x-session-id.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/not-existing",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"not-existing"
													]
												}
											},
											"response": [
												{
													"name": "missing header",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{BASE_URL}}/api/canvas/not-existing",
															"host": [
																"{{BASE_URL}}"
															],
															"path": [
																"api",
																"canvas",
																"not-existing"
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "X-Powered-By",
															"value": "Express"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "77"
														},
														{
															"key": "ETag",
															"value": "W/\"4d-txjbf5H0a3NbHWszHUwXPMYvioU\""
														},
														{
															"key": "Date",
															"value": "Sun, 28 Aug 2022 21:20:57 GMT"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Keep-Alive",
															"value": "timeout=5"
														}
													],
													"cookie": [],
													"body": "{\n    \"error\": \"Session header not found. Please specify the header x-session-id.\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "not enough credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(403);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.error).to.be.a('string').and.match(/Not enough credits. Needed: 100000000. You have: \\d+/);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-SESSION-ID",
												"value": "secret-sauce",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/canvas/2",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"canvas",
												"2"
											]
										}
									},
									"response": [
										{
											"name": "not enough credits",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/2",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"2"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "64"
												},
												{
													"key": "ETag",
													"value": "W/\"40-d3a9Gg77RkqqLQ5LRz9+YI9wMUY\""
												},
												{
													"key": "Date",
													"value": "Thu, 01 Sep 2022 19:16:08 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"error\": \"Not enough credits. Needed: 100000000. You have: 102\"\n}"
										}
									]
								},
								{
									"name": "valid draw",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.success).to.equal(true);",
													"    pm.expect(responseJson.creditsDeducted).to.equal(0.0000001); // same as 1e-7",
													"    pm.expect(responseJson.creditsLeft).to.be.a('number');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-SESSION-ID",
												"value": "secret-sauce",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/canvas/3",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"canvas",
												"3"
											]
										}
									},
									"response": [
										{
											"name": "valid draw",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/3",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"3"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "57"
												},
												{
													"key": "ETag",
													"value": "W/\"39-SMNhqGKYDKJCwtfI90ivwm5Gfoo\""
												},
												{
													"key": "Date",
													"value": "Thu, 01 Sep 2022 19:16:45 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"success\": true,\n    \"creditsDeducted\": 1e-7,\n    \"creditsLeft\": 105\n}"
										}
									]
								},
								{
									"name": "check changes after draw",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    pm.expect(pm.response).to.have.property('code', 200);",
													"    pm.expect(pm.response.json().changes.length).to.be.equal(pm.variables.get(\"currentChangeCount\") + 1);",
													"    pm.expect(pm.response.json().changes",
													"        .find(pixel => pixel.x === 0 && pixel.y === 0 && pixel.color === pm.variables.get(\"randomChangedColor\")))",
													"        .to.be.eql({",
													"            \"x\": 0,",
													"            \"y\": 0,",
													"            \"color\": pm.variables.get(\"randomChangedColor\")",
													"        });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomChangedColor = pm.variables.replaceIn(\"{{$randomHexColor}}\").substring(1);",
													"pm.variables.set(\"randomChangedColor\", randomChangedColor);",
													"",
													"pm.sendRequest(pm.variables.replaceIn(\"{{BASE_URL}}/api/canvas/3/changes?since=2000-01-01T00:00:00Z\"), (error, response) => {",
													"    console.log('Changes before:', response.text());",
													"",
													"    let responseParsingError = null;",
													"    try {",
													"        pm.variables.set(\"currentChangeCount\", response.json().changes ? response.json().changes.length : null);",
													"    } catch (err) {",
													"        responseParsingError = \"Failed parsing response: \" + response.text();",
													"    }",
													"",
													"    pm.test('changes not yet exist', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.expect(response).to.have.property('code', 200);",
													"        pm.expect(responseParsingError).to.equal(null);",
													"    });",
													"",
													"    pm.sendRequest({",
													"        url: pm.variables.replaceIn(\"{{BASE_URL}}/api/canvas/3\"),",
													"        method: 'PUT',",
													"        header: {",
													"            'Content-Type': 'application/json',",
													"            'X-SESSION-ID': 'secret-sauce'",
													"        },",
													"        body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify({",
													"                \"pixels\": [",
													"                    {\"x\": 0, \"y\": 0, \"color\": randomChangedColor}",
													"                ]",
													"            })",
													"        }",
													"    }, (error, response) => {",
													"        console.log('Draw result:', response.text());",
													"        pm.test('drawing successful', () => {",
													"            pm.expect(error).to.equal(null);",
													"            pm.expect(response).to.have.property('code', 200);",
													"        });",
													"    });",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-SESSION-ID",
												"value": "secret-sauce",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/canvas/3/changes?since=2000-01-01T00:00:00Z",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"canvas",
												"3",
												"changes"
											],
											"query": [
												{
													"key": "since",
													"value": "2000-01-01T00:00:00Z"
												}
											]
										}
									},
									"response": [
										{
											"name": "check changes",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/3",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"3"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "594"
												},
												{
													"key": "ETag",
													"value": "W/\"252-2/+rltXZWCoNEm1F36DJxxgwD08\""
												},
												{
													"key": "Date",
													"value": "Sun, 28 Aug 2022 21:21:35 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"image\": \"8220700ffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff000000000000ffffffffffffffffff000000000000ffffffffffff000000000000000000000000ffffffffffff000000000000ffffff000000000000000000000000000000000000ffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffff000000ffffffffffff000000ffffffffffffffffffffffffffffff000000000000ffffff000000000000ffffffffffff\",\n    \"pixelCost\": 1e-7\n}"
										}
									]
								},
								{
									"name": "check encoded image after draw",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('status', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test('response', () => {",
													"    pm.expect(pm.response.headers.get('Content-Type').startsWith('application/json')).to.be.true;",
													"",
													"    pm.expect(pm.response).to.have.property('code', 200);",
													"    pm.expect(pm.response.json().image).to.have.length(10 * 10 * 6);",
													"    pm.expect(pm.response.json().image.startsWith(pm.variables.get('randomChangedColor'))).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomChangedColor = pm.variables.replaceIn(\"{{$randomHexColor}}\").substring(1);",
													"pm.variables.set(\"randomChangedColor\", randomChangedColor);",
													"",
													"pm.sendRequest(pm.variables.replaceIn(\"{{BASE_URL}}/api/canvas/3/changes?since=2000-01-01T00:00:00Z\"), (error, response) => {",
													"    console.log('Changes before:', response.text());",
													"    pm.test('changes not yet exist', () => {",
													"        pm.expect(error).to.equal(null);",
													"        pm.expect(response).to.have.property('code', 200);",
													"    });",
													"",
													"    pm.sendRequest({",
													"        url: pm.variables.replaceIn(\"{{BASE_URL}}/api/canvas/3\"),",
													"        method: 'PUT',",
													"        header: {",
													"            'Content-Type': 'application/json',",
													"            'X-SESSION-ID': 'secret-sauce'",
													"        },",
													"        body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify({",
													"                \"pixels\": [",
													"                    {\"x\": 0, \"y\": 0, \"color\": randomChangedColor}",
													"                ]",
													"            })",
													"        }",
													"    }, (error, response) => {",
													"        console.log('Draw result:', response.text());",
													"        pm.test('drawing successful', () => {",
													"            pm.expect(error).to.equal(null);",
													"            pm.expect(response).to.have.property('code', 200);",
													"        });",
													"    });",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-SESSION-ID",
												"value": "secret-sauce",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"pixels\": [\n        {\"x\": 0, \"y\": 0, \"color\": \"ff0000\"}\n    ]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/canvas/3",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"canvas",
												"3"
											]
										}
									},
									"response": [
										{
											"name": "check changes",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "X-SESSION-ID",
														"value": "secret-sauce",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{BASE_URL}}/api/canvas/3",
													"host": [
														"{{BASE_URL}}"
													],
													"path": [
														"api",
														"canvas",
														"3"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "594"
												},
												{
													"key": "ETag",
													"value": "W/\"252-2/+rltXZWCoNEm1F36DJxxgwD08\""
												},
												{
													"key": "Date",
													"value": "Sun, 28 Aug 2022 21:21:35 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"image\": \"8220700ffffff000000000000ffffffffffffffffffffffffffffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff000000000000ffffffffffffffffff000000000000ffffffffffff000000000000000000000000ffffffffffff000000000000ffffff000000000000000000000000000000000000ffffffffffff000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffff000000ffffffffffff000000ffffffffffffffffffffffffffffff000000000000ffffff000000000000ffffffffffff\",\n    \"pixelCost\": 1e-7\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    /**",
					"     * Compares two timestamps and checks if they are loosley similar.",
					"     */",
					"    isTimestampSimilar: (a, b) => {",
					"        if (typeof a !== \"string\" || typeof b !== \"string\") {",
					"            return false;",
					"        }",
					"",
					"        const aDate = new Date(a);",
					"        const bDate = new Date(b);",
					"",
					"        // check if dates can be parsed",
					"        if (isNaN(aDate.getTime()) || isNaN(bDate.getTime())) {",
					"            return false;",
					"        }",
					"",
					"        const diffInMillis = Math.abs(aDate.getTime() - bDate.getTime());",
					"",
					"        const oneMinuteInMillis = 60 * 1000;",
					"        const oneHourInMillis = 60 * oneMinuteInMillis;",
					"        const twoHoursInMillis = 2 * oneHourInMillis;",
					"",
					"        // diff within 1 minute",
					"        if (diffInMillis < oneMinuteInMillis) {",
					"            return true;",
					"        }",
					"",
					"        // timezone difference of 1h (daylight saving time in Switzerland)",
					"        if (",
					"            diffInMillis >= oneHourInMillis - oneMinuteInMillis &&",
					"            diffInMillis <= oneHourInMillis + oneMinuteInMillis",
					"        ) {",
					"            return true;",
					"        }",
					"",
					"        // timezone difference of 2h (summer time in Switzerland)",
					"        if (",
					"            diffInMillis >= twoHoursInMillis - oneMinuteInMillis &&",
					"            diffInMillis <= twoHoursInMillis + oneMinuteInMillis",
					"        ) {",
					"            return true;",
					"        }",
					"",
					"        return false;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "MAILHOG_URL",
			"value": "http://localhost:8025",
			"type": "string"
		},
		{
			"key": "uniqueUsername",
			"value": ""
		},
		{
			"key": "uniqueEmail",
			"value": ""
		},
		{
			"key": "uniquePassword",
			"value": ""
		},
		{
			"key": "verifyLink",
			"value": ""
		},
		{
			"key": "uniqueUsername_unverified",
			"value": ""
		},
		{
			"key": "uniqueEmail_unverified",
			"value": ""
		},
		{
			"key": "uniquePassword_unverified",
			"value": ""
		}
	]
}